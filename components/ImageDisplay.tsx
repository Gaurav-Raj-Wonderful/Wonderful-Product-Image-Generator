
import React, { useState, useEffect } from 'react';
import { Icon } from './Icon';

interface ImageDisplayProps {
  imageUrl: string | null;
  text: string;
  isLoading: boolean;
  error: string | null;
}

const LoadingSkeleton: React.FC = () => (
  <div className="w-full aspect-square bg-gray-100 dark:bg-gray-900 rounded-lg animate-pulse flex flex-col items-center justify-center p-4 border border-gray-200 dark:border-gray-700">
      <Icon name="image" className="w-16 h-16 text-gray-400 dark:text-gray-600 mb-4"/>
      <p className="text-gray-600 dark:text-gray-400 font-medium">Generating your vision...</p>
      <p className="text-gray-500 dark:text-gray-500 text-sm text-center mt-2">This may take a moment while the model creates a new image.</p>
  </div>
);

const InitialState: React.FC = () => (
  <div className="w-full aspect-square border-2 border-dashed border-gray-300 dark:border-gray-700 rounded-lg flex flex-col items-center justify-center p-6 text-center">
    <Icon name="image" className="w-16 h-16 text-gray-400 dark:text-gray-600 mb-4"/>
    <h3 className="text-lg font-semibold text-gray-600 dark:text-gray-400">Your generated image will appear here</h3>
    <p className="text-gray-500 dark:text-gray-500 mt-1">Select a product and describe a scene to begin.</p>
  </div>
);

const ErrorState: React.FC<{ message: string }> = ({ message }) => (
    <div className="w-full aspect-square border-2 border-red-500/30 bg-red-500/10 rounded-lg flex flex-col items-center justify-center p-6 text-center">
    <Icon name="alert-triangle" className="w-16 h-16 text-red-500/80 mb-4"/>
    <h3 className="text-lg font-semibold text-red-500 dark:text-red-400">An Error Occurred</h3>
    <p className="text-red-600/80 dark:text-red-400/80 mt-1">{message}</p>
  </div>
);

interface ActionToolbarProps {
  imageUrl: string | null;
}

const ActionToolbar: React.FC<ActionToolbarProps> = ({ imageUrl }) => {
  const [copied, setCopied] = useState(false);

  useEffect(() => {
    if (!copied) return;
    const timer = setTimeout(() => setCopied(false), 2000);
    return () => clearTimeout(timer);
  }, [copied]);

  const handleDownload = () => {
    if (!imageUrl) return;
    const link = document.createElement('a');
    link.href = imageUrl;
    link.download = `wonderful-pistachios-generated-${Date.now()}.png`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const handleCopy = async () => {
    if (!imageUrl || copied) return;
    try {
      const response = await fetch(imageUrl);
      const blob = await response.blob();
      await navigator.clipboard.write([
        new ClipboardItem({ [blob.type]: blob }),
      ]);
      setCopied(true);
    } catch (err) {
      console.error('Failed to copy image: ', err);
      alert('Failed to copy image. Your browser might not support this feature or require permissions.');
    }
  };

  return (
    <div className="absolute top-2 right-2 flex items-center gap-1 bg-white/50 dark:bg-gray-900/50 backdrop-blur-sm p-1 rounded-lg border border-gray-300 dark:border-gray-700">
      <button
        onClick={handleCopy}
        disabled={copied}
        className="p-1.5 text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md transition-all duration-200"
        aria-label={copied ? "Copied to clipboard" : "Copy image"}
      >
        {copied ? <Icon name="check" className="w-5 h-5 text-green-500" /> : <Icon name="copy" className="w-5 h-5" />}
      </button>
      <button
        onClick={handleDownload}
        className="p-1.5 text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md transition-colors"
        aria-label="Download image"
      >
        <Icon name="download" className="w-5 h-5" />
      </button>
    </div>
  );
};


export const ImageDisplay: React.FC<ImageDisplayProps> = ({ imageUrl, text, isLoading, error }) => {
  return (
    <div className="flex flex-col flex-grow">
      <div className="flex-grow relative">
        {isLoading ? (
          <LoadingSkeleton />
        ) : error ? (
          <ErrorState message={error} />
        ) : imageUrl ? (
          <div className="relative w-full h-full aspect-square">
            <img src={imageUrl} alt="Generated by Gemini" className="w-full h-full object-contain rounded-lg"/>
            <ActionToolbar imageUrl={imageUrl} />
          </div>
        ) : (
          <InitialState />
        )}
      </div>
      {text && !isLoading && !error && (
        <div className="mt-4 p-3 bg-gray-100 dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700">
          <p className="text-sm text-gray-600 dark:text-gray-400">{text}</p>
        </div>
      )}
    </div>
  );
};